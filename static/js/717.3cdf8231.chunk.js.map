{"version":3,"file":"static/js/717.3cdf8231.chunk.js","mappings":"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","sources":["app/Dashboard/Layouts/DashboardContainer.tsx","app/Dashboard/components/EnhancedTable.tsx","app/Dashboard/components/Table.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport Grid from '@mui/material/Grid';\n\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport Link from '@mui/material/Link';\n\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n  event.preventDefault();\n  console.info('You clicked a breadcrumb.');\n}\n\nfunction BreadcrumbLink(props:any) {\n    return (\n        <Link\n        underline=\"hover\"\n        key={props.id}\n        color=\"inherit\"\n        href={props.href}\n        onClick={handleClick}\n      >\n        {props.text}\n      </Link>\n    );\n}\n\nfunction BreadcrumbText(props:any) {\n    return (\n        <Typography key={props.id} color=\"text.primary\">\n            {props.text}\n        </Typography> \n    );\n}\n\nfunction CustomSeparator(props:any) {\n  //console.log(props.breadcrumbs.slice(0, -1));\n  //console.log(props.breadcrumbs[props.breadcrumbs.length-1]);\n  const breadcrumbs = [ \n    ...props.breadcrumbs.slice(0, -1).map((a:any)=>{\n      return <BreadcrumbLink href={a.href} id={a.id} text={a.text} key={a.id}/>\n    }), \n    <BreadcrumbText \n      id={props.breadcrumbs[props.breadcrumbs.length-1].id} \n      text={props.breadcrumbs[props.breadcrumbs.length-1].text} \n      key={props.breadcrumbs[props.breadcrumbs.length-1].id}\n    />];\n  \n  /*[\n    <Link underline=\"hover\" key=\"1\" color=\"inherit\" href=\"/\" onClick={handleClick}>\n      MUI\n    </Link>,\n    <Link\n      underline=\"hover\"\n      key=\"2\"\n      color=\"inherit\"\n      href=\"/getting-started/installation/\"\n      onClick={handleClick}\n    >\n      Core\n    </Link>,\n    <Typography key=\"3\" color=\"text.primary\">\n      Breadcrumb\n    </Typography>,\n  ];*/\n\n  return (\n    <Stack spacing={2}>\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        {breadcrumbs}\n      </Breadcrumbs>\n    </Stack>\n  );\n}\n\n\n\nfunction DashboardContainer(props:any) {\n  return (\n    <div>\n        <Grid item xs={12} md={12} lg={12}  sx={{m:1}}>\n            <CustomSeparator breadcrumbs={props.breadcrumbs}/>\n        </Grid>\n        <Grid item xs={12} md={12} lg={12}  sx={{m:1}}>\n            {props.children}\n        </Grid>\n    </div>\n  );\n}\n\nexport default DashboardContainer;\n","import * as React from 'react';\n\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Paper from '@mui/material/Paper';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport { visuallyHidden } from '@mui/utils';\nimport { alpha } from '@mui/material/styles';\n\nimport EditIcon from '@mui/icons-material/Edit';\nimport CloseIcon from '@mui/icons-material/Close';\n//import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\n//import RemoveShoppingCartIcon from '@mui/icons-material/RemoveShoppingCart';\n//import AddShoppingCartIcon from '@mui/icons-material/AddShoppingCart';\n//import ShoppingCartCheckoutIcon from '@mui/icons-material/ShoppingCartCheckout';\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\n// This method is created for cross-browser compatibility, if you don't\n// need to support IE11, you can use Array.prototype.sort() directly\nfunction stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface EnhancedTableProps {\n  numSelected: number;\n  onRequestSort: (event: React.MouseEvent<unknown>, property: any) => void;\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  order: Order;\n  orderBy: string;\n  rowCount: number;\n  headCells: any\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const headCells = props.headCells;\n  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\n    props;\n  const createSortHandler =\n    (property: any) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'select all desserts',\n            }}\n          />\n        </TableCell>\n        {headCells.map((headCell:any) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n        <TableCell padding=\"checkbox\">\n          <div style={{width: \"100px\", textAlign: \"center\"}}>\n            Actions\n          </div>\n        </TableCell>\n      </TableRow>\n    </TableHead>\n  );\n}\n\ninterface EnhancedTableToolbarProps {\n  numSelected: number;\n}\n\nconst EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Nutrition\n        </Typography>\n      )}\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton>\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nfunction EnhancedTable(props:any) {\n  const [order, setOrder] = React.useState<Order>('asc');\n  const [orderBy, setOrderBy] = React.useState<any>('');\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const rows = props.rows;\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: any,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n:any) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event: React.MouseEvent<unknown>, name: string|any) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected: readonly string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name: string| any) => selected.indexOf(name) !== -1;\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Paper sx={{ width: '100%', mb: 2 }}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size={'medium'}\n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n              headCells={props.headCells}\n            />\n            <TableBody>\n              {/* if you don't need to support IE11, you can replace the `stableSort` call with:\n              rows.slice().sort(getComparator(order, orderBy)) */}\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.name);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.name)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.name}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            'aria-labelledby': labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        component=\"th\"\n                        id={labelId}\n                        scope=\"row\"\n                        padding=\"none\"\n                      >\n                        {row[props.headCells[0].id]}\n                      </TableCell>\n                      {/*<TableCell align=\"right\">{row.calories}</TableCell>\n                      <TableCell align=\"right\">{row.fat}</TableCell>\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\n                      <TableCell align=\"right\">{row.protein}</TableCell>*/}\n                      {\n                          props.headCells.slice(1).map((hrow:any, key:number)=>{\n                              return <>\n                                <TableCell key={key} align=\"right\">{row[props.headCells[key+1].id]}</TableCell>\n                              </>\n                          })\n                      }\n\n                      <TableCell align=\"right\">\n                      <div style={{display: \"flex\", width: \"100px\", justifyContent: \"center\"}}>\n                        <a href={`/${row.name}`}><EditIcon /></a>\n                      </div>\n                        \n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow\n                  style={{\n                    height: (53) * emptyRows,\n                  }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </Box>\n  );\n}\n\nexport default EnhancedTable;","import * as React from 'react';\n\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Paper from '@mui/material/Paper';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport { visuallyHidden } from '@mui/utils';\nimport { alpha } from '@mui/material/styles';\n\nimport DashboardContainer from '../Layouts/DashboardContainer';\n\n\nimport EnhancedTable from './EnhancedTable';\n\n/*\ninterface Data {\n  calories: number;\n  carbs: number;\n  fat: number;\n  name: string;\n  protein: number;\n}\n\nfunction createData(\n  name: string,\n  calories: number,\n  fat: number,\n  carbs: number,\n  protein: number,\n): Data {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein,\n  };\n}\n\n{\n    name: 'Cupcake',\n    calories: 305,\n    fat: 3.7,\n    carbs: 67,\n    protein: 4.3,\n}\n\nconst rows = [\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Donut', 452, 25.0, 51, 4.9),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n  createData('Honeycomb', 408, 3.2, 87, 6.5),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Jelly Bean', 375, 0.0, 94, 0.0),\n  createData('KitKat', 518, 26.0, 65, 7.0),\n  createData('Lollipop', 392, 0.2, 98, 0.0),\n  createData('Marshmallow', 318, 0, 81, 2.0),\n  createData('Nougat', 360, 19.0, 9, 37.0),\n  createData('Oreo', 437, 18.0, 63, 4.0),\n];\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\n// This method is created for cross-browser compatibility, if you don't\n// need to support IE11, you can use Array.prototype.sort() directly\nfunction stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface HeadCell {\n  disablePadding: boolean;\n  id: keyof Data;\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: readonly HeadCell[] = [\n  {\n    id: 'name',\n    numeric: false,\n    disablePadding: true,\n    label: 'Dessert (100g serving)',\n  },\n  {\n    id: 'calories',\n    numeric: true,\n    disablePadding: false,\n    label: 'Calories',\n  },\n  {\n    id: 'fat',\n    numeric: true,\n    disablePadding: false,\n    label: 'Fat (g)',\n  },\n  {\n    id: 'carbs',\n    numeric: true,\n    disablePadding: false,\n    label: 'Carbs (g)',\n  },\n  {\n    id: 'protein',\n    numeric: true,\n    disablePadding: false,\n    label: 'Protein (g)',\n  },\n];\n\ninterface EnhancedTableProps {\n  numSelected: number;\n  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  order: Order;\n  orderBy: string;\n  rowCount: number;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\n    props;\n  const createSortHandler =\n    (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'select all desserts',\n            }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n        <TableCell padding=\"checkbox\">\n          <div style={{width: \"100px\", textAlign: \"center\"}}>\n            Actions\n          </div>\n        </TableCell>\n      </TableRow>\n    </TableHead>\n  );\n}\n\ninterface EnhancedTableToolbarProps {\n  numSelected: number;\n}\n\nconst EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Nutrition\n        </Typography>\n      )}\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton>\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nfunction EnhancedTable() {\n  const [order, setOrder] = React.useState<Order>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof Data>('calories');\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof Data,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected: readonly string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Paper sx={{ width: '100%', mb: 2 }}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size={'medium'}\n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.name);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.name)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.name}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            'aria-labelledby': labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        component=\"th\"\n                        id={labelId}\n                        scope=\"row\"\n                        padding=\"none\"\n                      >\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.calories}</TableCell>\n                      <TableCell align=\"right\">{row.fat}</TableCell>\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\n                      <TableCell align=\"right\">{row.protein}</TableCell>\n                      <TableCell align=\"right\">\n                      <div style={{display: \"flex\", width: \"100px\", justifyContent: \"center\"}}>\n                        <a href={`/${row.name}`}>Edit</a>\n                      </div>\n                        \n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow\n                  style={{\n                    height: (53) * emptyRows,\n                  }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </Box>\n  );\n}\n*/\n/*\n\nEnhancedTableToolbar\nEnhancedTableHead (headCells)\nTableBody (rows)\nTablePagination\n\n\n*/\n\nfunction DashboardTable() {\n  const headCells = [\n    {\n      id: 'name',\n      numeric: false,\n      disablePadding: true,\n      label: 'Dessert (100g serving)',\n    },\n    {\n      id: 'calories',\n      numeric: true,\n      disablePadding: false,\n      label: 'Calories',\n    },\n    {\n      id: 'carbs',\n      numeric: true,\n      disablePadding: false,\n      label: 'Carbs (g)',\n    },\n    {\n      id: 'protein',\n      numeric: true,\n      disablePadding: false,\n      label: 'Protein (g)',\n    },\n  ];\n  const rows = [\n    {\n      name: 'Cupcake',\n      calories: 305,\n      carbs: 67,\n      protein: 4.3,\n    },\n    {\n      name: 'Aupcake',\n      calories: 205,\n      carbs: 37,\n      protein: 8.3,\n    }\n  ];\n  return (\n    <DashboardContainer\n      breadcrumbs={[\n        {id:1, text: 'Dashboard', href:'/'},\n        {id:2, text: 'Table'}\n      ]}\n    >\n      <Paper\n          sx={{\n            p: 0,\n            mt:2,\n            mb: 2,\n            display: 'flex',\n            flexDirection: 'column',\n            boxShadow: 'none',\n            background: 'none',\n          }}\n        >\n          <EnhancedTable \n            headCells={headCells}\n            rows={rows}\n          />\n        </Paper>\n\n\n      \n    </DashboardContainer>\n  );\n}\n\nexport default DashboardTable;\n"],"names":["handleClick","event","preventDefault","console","info","BreadcrumbLink","props","underline","color","href","onClick","text","id","BreadcrumbText","CustomSeparator","breadcrumbs","slice","map","a","length","spacing","separator","fontSize","item","xs","md","lg","sx","m","children","descendingComparator","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","el","index","sort","EnhancedTableHead","headCells","onSelectAllClick","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","headCell","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","property","label","Box","component","visuallyHidden","style","width","textAlign","EnhancedTableToolbar","Toolbar","pl","sm","pr","bgcolor","theme","alpha","palette","primary","main","action","activatedOpacity","Typography","flex","variant","Tooltip","title","IconButton","Delete","FilterList","React","setOrder","setOrderBy","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","rows","emptyRows","Math","max","Paper","mb","TableContainer","Table","minWidth","size","target","newSelecteds","n","name","TableBody","row","isItemSelected","indexOf","labelId","hover","selectedIndex","newSelected","concat","role","tabIndex","scope","hrow","key","display","justifyContent","Edit","height","colSpan","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","value","DashboardContainer","p","mt","flexDirection","boxShadow","background","calories","carbs","protein"],"sourceRoot":""}